#!/usr/bin/env python
# coding: utf-8
import sys
import os

import logging
import yaml
import argparse


__author__ = "Theo Massard <massar_t@etna-alternance.net>"


def prepare_my_parser():
    """
    Prepares the parser to allow arguments.
    Current args:
     -q quiet mode        | -v verbose mode
     -o output filename   | -e error log filename
     -m mode (ip|name)    | -c custom config file
     -i custom input file | -n max ips to display (0 is infinite)
     --set-boolean display related ips to the req (False by default)
    """
    desc = "Create parser functions easily using a yaml config file"
    parser = argparse.ArgumentParser(description=desc)
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-q", "--quiet", action="store_true", default=False,
                        help="Quiet mode, silences logging\
                        below CRITICAL level")
    group.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="Verbose mode, beware.")
    parser.add_argument("-o", "--output-file",
                        help="Recapitulative log file", default="parser.py")
    parser.add_argument("-i", "--input-file", default="parser.yaml",
                        help="Yaml configuration with parser options")
    return parser


def prepare_my_logger(args):
    """
    Prepares the logger
    There are two filehandlers, one for results and another
    used to store errors.
    """
    global LOGGER
    if args['quiet']:
        level = logging.CRITICAL
    elif args['verbose']:
        level = logging.DEBUG
    else:
        level = logging.INFO
    LOGGER = logging.getLogger()
    LOGGER.setLevel(level)
    formatter = logging.Formatter('[%(levelname)s] %(message)s')
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(level)
    stream_handler.setFormatter(formatter)
    LOGGER.addHandler(stream_handler)


class ParserGenerator(object):
    """
    Define parser
    """

    def __init__(self, settings):
        self.settings = settings
        self.presents = []
        LOGGER.info("Successfully created ParserGenerator object")
        self.group_count = 0
        self.to_write = []
        if self.settings['verbose']:
            self.display_settings()
        self._define_parser()
    
    def __str__(self):
        f_def = self.to_write[0]
        to_display = '\n    '.join(self.to_write[1:])
        return f_def + to_display

    def _define_parser(self):
        self.to_write.append("def prep_my_parser():\n    ")
        self.to_write.append("parser = argparse.ArgumentParser()")

    def prep_content_for_writing(self):
        tmp = [self.to_write[0]]
        tmp.append('\n    '.join(self.to_write[1:]))
        return tmp

    def write_to_file(self):
        dest = self.settings['output_file']
        try:
            with open(dest, 'w') as f:
                f.writelines(self.prep_content_for_writing())
            LOGGER.info("Done. Result file is: %s", self.settings['output_file'])
        except IOError:
            LOGGER.critical("Could not write to file %s",
                            self.settings['output_file'],
                            exc_info=True)
            print self
            sys.exit(1)

    def load_yaml(self):
        try:
            with open(self.settings['input_file'], 'r') as f:
                self.content = f.readlines()
                self.yaml = yaml.load(''.join(self.content))
                LOGGER.debug(self.yaml)
        except IOError:
            LOGGER.critical("Could not open input file %s",
                            self.settings['input_file'],
                            exc_info=True)
            sys.exit(1)

    def display_settings(self):
        LOGGER.debug("Parser Generator settings:")
        for k in self.settings:
            LOGGER.debug("%s : %s", k, self.settings[k])

    def create_parser(self):
        """
        """
        opts = self.yaml
        for opt in opts:
            v_name = "parser"
            try:
                meta = opts[opt]['meta']
                LOGGER.debug("%s meta: %s", opt, meta)
                if type(meta) != list:
                    meta = [meta]
            except KeyError:
                meta = [None]
            if 'exclusive' in meta:
                v_name = "group{}".format(self.group_count)
                self.manage_meta(meta, v_name, opts[opt], opt)
                continue
            self.manage_no_meta(v_name, opts[opt], opt)

    def manage_no_meta(self, v_name, opt, nodename):
        """
        Method aiming to add args that
        have no meta attributes in the 
        configuration file.
        """
        print opt
        for arg in opt:
            if opt[arg] is not None:
                arg = str(nodename)
                if arg[0] not in self.presents and nodename not in self.presents:
                    new_opt = v_name + ".add_argument('-%s', '--%s')" % (arg[0], nodename)
                    self.presents.append(arg[0])
                    self.presents.append(nodename)
                else:
                    new_opt = v_name + ".add_argument('--%s')" % (arg)
                    self.presents.append(arg)
                self.to_write.append(new_opt)
                
        LOGGER.debug("Added args to %s", v_name)

    def manage_meta(self, meta, v_name, opt, nodename):
        """
        Method aiming to add args that
        have metadata such as:
         - exclusive
        """
        self.group_count += 1
        new_group = v_name + \
                    " = parser.add_mutually_exclusive_group()"
        self.to_write.append(new_group)
        try:
            for arg in opt['args']:
                arg = str(arg)
                if arg[0] not in self.presents and arg not in self.presents:
                    new_opt = v_name + ".add_argument('-%s', '--%s')" % (arg[0], arg)
                    self.presents.append(arg[0])
                    self.presents.append(nodename)
                else:
                    new_opt = v_name + ".add_argument('--%s')" % arg
                    self.presents.append(arg)
                self.to_write.append(new_opt)
            LOGGER.debug("Finished adding %s", v_name)
        except Exception as e:
            LOGGER.warning("Issues happened while processing %s.",
                           e,
                           exc_info=True)

def setup():
    parser = prepare_my_parser()
    try:
        args = vars(parser.parse_args(sys.argv[1:]))
    except IndexError:
        args = vars(parser.parse_args())
    prepare_my_logger(args)
    return args

def main():
    args = setup()
    pc = ParserGenerator(args)
    pc.load_yaml()
    pc.create_parser()
    pc.write_to_file()
    # print pc
    
if __name__ == '__main__':
    main()
